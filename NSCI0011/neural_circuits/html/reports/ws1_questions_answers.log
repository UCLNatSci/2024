Traceback (most recent call last):
  File "/home/pete/.local/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/pete/.local/lib/python3.10/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/pete/.local/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/pete/.local/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/lib/python3.10/asyncio/base_events.py", line 646, in run_until_complete
    return future.result()
  File "/home/pete/.local/lib/python3.10/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/home/pete/.local/lib/python3.10/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/pete/.local/lib/python3.10/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# 2.
def bfs(adj, i):
    visited = [i]
    frontier = [i]

    while len(frontier) > 0:
        next = frontier
        frontier = []
        for j in next:
            neighbours = adj[j]
            for k in neighbours:
                if not k in visited:
                    frontier.append(k)
                    visited.append(k)
    return visited

g = [[5, 6], [7], [7], [], [7], [0, 6], [0, 5], [1, 2, 4]]

for i in range(len(g)):
    print(bfs(g, i))

# 3.

import numpy as np

def path_distances(adj, i):
    visited = [i]
    frontier = [i]
    distances = np.zeros(len(adj))
    distances[:] = -1
    distances[i] = 0
    d = 0
    while len(frontier) > 0:
        d += 1
        next = frontier
        frontier = []
        for j in next:
            neighbours = adj[j]
            for k in neighbours:
                if not k in visited:
                    frontier.append(k)
                    visited.append(k)
                    distances[k] = d
    return distances

n = len(g)
d = np.zeros((n,n))
for i in range(n):
    d[i,:] = path_distances(g, i)

print(d)

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn[1], line 24[0m
[1;32m     20[0m     [38;5;28mprint[39m(bfs(g, i))
[1;32m     22[0m [38;5;66;03m# 3.[39;00m
[0;32m---> 24[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[1;32m     26[0m [38;5;28;01mdef[39;00m [38;5;21mpath_distances[39m(adj, i):
[1;32m     27[0m     visited [38;5;241m=[39m [i]

[0;31mModuleNotFoundError[0m: No module named 'numpy'
ModuleNotFoundError: No module named 'numpy'

